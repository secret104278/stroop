{"version":3,"sources":["components/useKeyControl.ts","utils.ts","components/TestCaseDisplay.tsx","components/ControlBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["KeyControl","useKeyControl","useState","undefined","current","setCurrent","upPressed","useKeyPress","downPressed","leftPressed","rightPressed","escPressed","useEffect","Up","Down","Left","Right","Esc","getRandomInt","max","Math","floor","random","sampleRandomInt","length","set","Set","size","add","Array","from","values","availableColor","towThreeNoSameBrownCases","towThreeDoubleBrownCases","twoTwoOneCases","colorToKeyControl","c","toTestCase","literals","colors","map","Map","duplicated","x","get","Error","texts","zip","literal","color","ans","category","uniq","sampleSizeDuplicate","arr","res","i","concat","left","sampleSize","generateTestCases","testcases","shuffle","y","colorToChinses","TestCaseDisplay","React","memo","props","useWindowSize","width","height","padding","grid","testcase","fontSize","min","divWidth","divHeight","textDivs","xAnchor","yAnchor","text","push","style","position","top","ControlBar","hstyle","flex","keyPressed","display","flexDirection","keyControlToString","key","testcaseShort","App","useMemo","currentIndex","setCurrentIndex","answerHistory","setAnswerHistory","finished","setFinished","timerRef","useRef","performance","now","elapsedTime","prev","className","correct","slice","forEach","history","margin","paddingRight","Button","variant","onClick","join","testcasePlaintext","round","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","remove","TableContainer","component","Paper","Table","stickyHeader","TableHead","TableRow","hover","TableCell","align","TableBody","scope","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.79967bfc.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport { useKeyPress } from \"react-use\";\n\nexport enum KeyControl {\n  Up,\n  Down,\n  Left,\n  Right,\n  Esc,\n}\n\nexport const useKeyControl = (): KeyControl | undefined => {\n  const [current, setCurrent] = useState<KeyControl | undefined>(undefined);\n\n  const upPressed = useKeyPress(\"ArrowUp\")[0];\n  const downPressed = useKeyPress(\"ArrowDown\")[0];\n  const leftPressed = useKeyPress(\"ArrowLeft\")[0];\n  const rightPressed = useKeyPress(\"ArrowRight\")[0];\n  const escPressed = useKeyPress(\"Escape\")[0];\n\n  useEffect(() => {\n    if (upPressed) {\n      setCurrent(KeyControl.Up);\n    } else if (downPressed) {\n      setCurrent(KeyControl.Down);\n    } else if (leftPressed) {\n      setCurrent(KeyControl.Left);\n    } else if (rightPressed) {\n      setCurrent(KeyControl.Right);\n    } else if (escPressed) {\n      setCurrent(KeyControl.Esc);\n    } else {\n      setCurrent(undefined);\n    }\n  }, [downPressed, escPressed, leftPressed, rightPressed, upPressed]);\n\n  return current;\n};\n","import { Color, TestCase } from \"./components/TestCaseDisplay\";\nimport { sampleSize, shuffle, uniq, zip } from \"lodash\";\n\nimport { KeyControl } from \"./components/useKeyControl\";\n\nexport const getRandomInt = (max: number): number => {\n  return Math.floor(Math.random() * max);\n};\n\nexport const sampleRandomInt = (max: number, length: number): number[] => {\n  const set = new Set<number>();\n  while (set.size < length) {\n    set.add(getRandomInt(max));\n  }\n  return Array.from(set.values());\n};\n\nconst availableColor: Color[] = [\"red\", \"purple\", \"blue\", \"green\", \"brown\"];\n\n// len = 16\nconst towThreeNoSameBrownCases: Color[][] = [\n  // no red\n  [\"purple\", \"purple\", \"blue\", \"green\", \"brown\"],\n  [\"purple\", \"blue\", \"blue\", \"green\", \"brown\"],\n  [\"purple\", \"blue\", \"green\", \"green\", \"brown\"],\n  // no purple\n  [\"red\", \"red\", \"blue\", \"green\", \"brown\"],\n  [\"red\", \"blue\", \"blue\", \"green\", \"brown\"],\n  [\"red\", \"blue\", \"green\", \"green\", \"brown\"],\n  // no blue\n  [\"red\", \"purple\", \"green\", \"green\", \"brown\"],\n  [\"red\", \"purple\", \"purple\", \"green\", \"brown\"],\n  [\"red\", \"red\", \"purple\", \"green\", \"brown\"],\n  // no green\n  [\"red\", \"red\", \"purple\", \"blue\", \"brown\"],\n  [\"red\", \"purple\", \"purple\", \"blue\", \"brown\"],\n  [\"red\", \"purple\", \"blue\", \"blue\", \"brown\"],\n  // no brown\n  [\"red\", \"red\", \"purple\", \"blue\", \"green\"],\n  [\"red\", \"purple\", \"purple\", \"blue\", \"green\"],\n  [\"red\", \"purple\", \"blue\", \"blue\", \"green\"],\n  [\"red\", \"purple\", \"blue\", \"green\", \"green\"],\n];\n\n// len = 4\nconst towThreeDoubleBrownCases: Color[][] = [\n  // no red\n  [\"purple\", \"blue\", \"green\", \"brown\", \"brown\"],\n  // no purple\n  [\"red\", \"blue\", \"green\", \"brown\", \"brown\"],\n  // no blue\n  [\"red\", \"purple\", \"green\", \"brown\", \"brown\"],\n  // no green\n  [\"red\", \"purple\", \"blue\", \"brown\", \"brown\"],\n];\n\n// len = 30\nconst twoTwoOneCases: Color[][] = [\n  //\n  [\"blue\", \"blue\", \"green\", \"green\", \"brown\"],\n  [\"blue\", \"green\", \"green\", \"brown\", \"brown\"],\n  [\"blue\", \"blue\", \"green\", \"brown\", \"brown\"],\n  //\n  [\"purple\", \"purple\", \"green\", \"green\", \"brown\"],\n  [\"purple\", \"green\", \"green\", \"brown\", \"brown\"],\n  [\"purple\", \"purple\", \"green\", \"brown\", \"brown\"],\n  //\n  [\"purple\", \"purple\", \"blue\", \"blue\", \"brown\"],\n  [\"purple\", \"blue\", \"blue\", \"brown\", \"brown\"],\n  [\"purple\", \"purple\", \"blue\", \"brown\", \"brown\"],\n  //\n  [\"purple\", \"purple\", \"blue\", \"blue\", \"green\"],\n  [\"purple\", \"blue\", \"blue\", \"green\", \"green\"],\n  [\"purple\", \"purple\", \"blue\", \"green\", \"green\"],\n  //\n  [\"red\", \"red\", \"green\", \"green\", \"brown\"],\n  [\"red\", \"green\", \"green\", \"brown\", \"brown\"],\n  [\"red\", \"red\", \"green\", \"brown\", \"brown\"],\n  //\n  [\"red\", \"red\", \"blue\", \"blue\", \"brown\"],\n  [\"red\", \"blue\", \"blue\", \"brown\", \"brown\"],\n  [\"red\", \"red\", \"blue\", \"brown\", \"brown\"],\n  //\n  [\"red\", \"red\", \"blue\", \"blue\", \"green\"],\n  [\"red\", \"blue\", \"blue\", \"green\", \"green\"],\n  [\"red\", \"red\", \"blue\", \"green\", \"green\"],\n  //\n  [\"red\", \"red\", \"purple\", \"purple\", \"brown\"],\n  [\"red\", \"purple\", \"purple\", \"brown\", \"brown\"],\n  [\"red\", \"red\", \"purple\", \"brown\", \"brown\"],\n  //\n  [\"red\", \"red\", \"purple\", \"purple\", \"green\"],\n  [\"red\", \"purple\", \"purple\", \"green\", \"green\"],\n  [\"red\", \"red\", \"purple\", \"green\", \"green\"],\n  //\n  [\"red\", \"red\", \"purple\", \"purple\", \"blue\"],\n  [\"red\", \"purple\", \"purple\", \"blue\", \"blue\"],\n  [\"red\", \"red\", \"purple\", \"blue\", \"blue\"],\n];\n\nconst colorToKeyControl = (c: Color): KeyControl => {\n  switch (c) {\n    case \"red\":\n      return KeyControl.Up;\n    case \"green\":\n      return KeyControl.Down;\n    case \"purple\":\n      return KeyControl.Left;\n    case \"blue\":\n      return KeyControl.Right;\n    case \"brown\":\n      return KeyControl.Esc;\n  }\n};\n\nconst toTestCase = (literals: Color[], colors: Color[]): TestCase => {\n  const map = new Map<Color, boolean>();\n  let duplicated: Color | undefined = undefined;\n\n  for (const x of literals) {\n    if (map.get(x)) {\n      duplicated = x;\n      break;\n    }\n    map.set(x, true);\n  }\n\n  if (!duplicated) throw Error(\"#112\");\n\n  return {\n    texts: zip(literals, colors).map(([x, y]) => ({ literal: x!, color: y! })),\n    ans: colorToKeyControl(duplicated),\n    category:\n      uniq(colors).length === 5\n        ? \"一般命中\"\n        : duplicated === \"brown\"\n        ? \"正確拒絕\"\n        : \"虛警\",\n  };\n};\n\nfunction sampleSizeDuplicate<T>(arr: T[], size: number): T[] {\n  let res: T[] = [];\n  for (let i = 0; i < Math.floor(size / arr.length); i++) {\n    res = res.concat(arr);\n  }\n\n  const left = size % arr.length;\n  res = res.concat(sampleSize(arr, left));\n\n  return res;\n}\n\nexport const generateTestCases = (): TestCase[] => {\n  const a = 34;\n  const b = 33;\n  const c = 33;\n\n  let testcases: TestCase[] = [];\n\n  testcases = testcases.concat(\n    shuffle(\n      sampleSizeDuplicate(\n        [...towThreeNoSameBrownCases, ...towThreeDoubleBrownCases],\n        a\n      )\n    ).map((x) => toTestCase(x, availableColor))\n  );\n\n  testcases = testcases.concat(\n    zip(\n      shuffle(sampleSizeDuplicate(towThreeNoSameBrownCases, b)),\n      shuffle(\n        sampleSizeDuplicate(\n          [\n            ...twoTwoOneCases,\n            ...towThreeNoSameBrownCases,\n            ...towThreeDoubleBrownCases,\n          ],\n          b\n        )\n      )\n    ).map(([x, y]) => toTestCase(x!, y!))\n  );\n\n  testcases = testcases.concat(\n    zip(\n      shuffle(sampleSizeDuplicate(towThreeDoubleBrownCases, c)),\n      shuffle(\n        sampleSizeDuplicate(\n          [\n            ...twoTwoOneCases,\n            ...towThreeNoSameBrownCases,\n            ...towThreeDoubleBrownCases,\n          ],\n          c\n        )\n      )\n    ).map(([x, y]) => toTestCase(x!, y!))\n  );\n\n  return shuffle(testcases);\n};\n","import { KeyControl } from \"./useKeyControl\";\nimport React from \"react\";\nimport { sampleRandomInt } from \"../utils\";\nimport { useWindowSize } from \"react-use\";\n\nexport const colorToChinses = (color: Color): string => {\n  switch (color) {\n    case \"red\":\n      return \"紅色\";\n    case \"purple\":\n      return \"紫色\";\n    case \"blue\":\n      return \"藍色\";\n    case \"green\":\n      return \"綠色\";\n    case \"brown\":\n      return \"棕色\";\n  }\n};\n\nexport type Color = \"red\" | \"purple\" | \"blue\" | \"green\" | \"brown\";\n\nexport interface TextPair {\n  literal: Color;\n  color: Color;\n}\n\nexport interface TestCase {\n  texts: TextPair[];\n  ans: KeyControl;\n  category: string;\n}\n\nexport type TestCaseDisplayProps = {\n  testcase: TestCase;\n};\n\nexport const TestCaseDisplay = React.memo((props: TestCaseDisplayProps) => {\n  const { width, height } = useWindowSize();\n\n  const padding = 100;\n  const grid = props.testcase.texts.length * 2;\n\n  const fontSize = Math.min(width, height) / 11;\n\n  const divWidth = (width - 2 * padding) / grid;\n  const divHeight = (height - 2 * padding) / grid;\n\n  const textDivs = [];\n\n  const xAnchor = sampleRandomInt(grid, props.testcase.texts.length);\n  const yAnchor = sampleRandomInt(grid, props.testcase.texts.length);\n\n  let i = 0;\n  for (const text of props.testcase.texts) {\n    textDivs.push(\n      <div\n        style={{\n          position: \"absolute\",\n          left: padding + divWidth * xAnchor[i],\n          top: padding + divHeight * yAnchor[i],\n          fontSize: fontSize,\n          color: text.color,\n        }}\n      >\n        {colorToChinses(text.literal)}\n      </div>\n    );\n    i++;\n  }\n\n  return <div style={{ position: \"relative\" }}>{textDivs}</div>;\n});\n","import { KeyControl, useKeyControl } from \"./useKeyControl\";\n\nexport const ControlBar = () => {\n  const hstyle = { flex: 1 };\n\n  const keyPressed = useKeyControl();\n\n  return (\n    <div style={{ flex: 1, display: \"flex\", flexDirection: \"row\" }}>\n      <p\n        style={{\n          ...hstyle,\n          color: keyPressed === KeyControl.Up ? \"black\" : \"gray\",\n        }}\n      >\n        ↑紅色\n      </p>\n      <p\n        style={{\n          ...hstyle,\n          color: keyPressed === KeyControl.Down ? \"black\" : \"gray\",\n        }}\n      >\n        ↓綠色\n      </p>\n      <p\n        style={{\n          ...hstyle,\n          color: keyPressed === KeyControl.Left ? \"black\" : \"gray\",\n        }}\n      >\n        ←紫色\n      </p>\n      <p\n        style={{\n          ...hstyle,\n          color: keyPressed === KeyControl.Right ? \"black\" : \"gray\",\n        }}\n      >\n        →藍色\n      </p>\n      <p\n        style={{\n          ...hstyle,\n          color: keyPressed === KeyControl.Esc ? \"black\" : \"gray\",\n        }}\n      >\n        esc拒絕\n      </p>\n    </div>\n  );\n};\n","import \"./App.css\";\n\nimport { KeyControl, useKeyControl } from \"./components/useKeyControl\";\nimport {\n  TestCase,\n  TestCaseDisplay,\n  colorToChinses,\n} from \"./components/TestCaseDisplay\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\nimport { ControlBar } from \"./components/ControlBar\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { generateTestCases } from \"./utils\";\nimport { round } from \"lodash\";\n\nconst keyControlToString = (key: KeyControl) => {\n  switch (key) {\n    case KeyControl.Up:\n      return \"↑紅色\";\n    case KeyControl.Down:\n      return \"↓綠色\";\n    case KeyControl.Left:\n      return \"←紫色\";\n    case KeyControl.Right:\n      return \"→藍色\";\n    case KeyControl.Esc:\n      return \"esc拒絕\";\n  }\n};\n\nconst testcaseShort = (testcase: TestCase) => {\n  return (\n    <p>\n      {testcase.texts.map((x) => (\n        <span style={{ color: x.color }}>{colorToChinses(x.literal)} </span>\n      ))}\n    </p>\n  );\n};\n\nconst testcasePlaintext = (testcase: TestCase) => {\n  return testcase.texts\n    .map((x) => `C(${colorToChinses(x.color)})T(${colorToChinses(x.literal)})`)\n    .join(\" \");\n};\n\nfunction App() {\n  const testcases = useMemo(generateTestCases, []);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [answerHistory, setAnswerHistory] = useState<\n    { elapsedTime: number; ans: KeyControl }[]\n  >([]);\n  const [finished, setFinished] = useState(false);\n  const timerRef = useRef(0);\n  const keyPressed = useKeyControl();\n\n  useEffect(() => {\n    timerRef.current = performance.now();\n  }, []);\n\n  useEffect(() => {\n    if (keyPressed === undefined || finished) return;\n    const elapsedTime = performance.now() - timerRef.current;\n    setAnswerHistory((prev) => [\n      ...prev,\n      { elapsedTime: elapsedTime, ans: keyPressed },\n    ]);\n    setCurrentIndex((prev) => prev + 1);\n\n    timerRef.current = performance.now();\n  }, [finished, keyPressed]);\n\n  useEffect(() => {\n    if (currentIndex > testcases.length) {\n      setFinished(true);\n    }\n  }, [currentIndex, testcases.length]);\n\n  const testcase = testcases[currentIndex];\n  if (!finished && testcase)\n    return (\n      <div className=\"App\">\n        <div style={{ display: \"flex\", flexDirection: \"row\", width: \"100%\" }}>\n          <p>\n            ({currentIndex + 1} / {testcases.length})\n          </p>\n          {/* <p>\n            正確答案: {keyControlToString(testcase.ans)} , 類別:{\" \"}\n            {testcase.category}\n          </p> */}\n          <ControlBar></ControlBar>\n        </div>\n        <TestCaseDisplay testcase={testcase}></TestCaseDisplay>\n      </div>\n    );\n\n  let correct = 0;\n  answerHistory.slice(0, testcases.length - 1).forEach((history, i) => {\n    if (testcases[i].ans === history.ans) correct += 1;\n  });\n\n  return (\n    <div\n      className=\"App\"\n      style={{\n        height: \"calc(100vh - 64px)\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        margin: \"16px\",\n      }}\n    >\n      <div style={{ display: \"flex\", padding: \"16px\" }}>\n        <div style={{ flex: 1 }} />\n        <p style={{ paddingRight: \"16px\" }}>\n          回答正確：{correct} / {testcases.length}\n        </p>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            let text = \"題號,題目,類別,正確答案,回答,結果,耗時(s)\\n\";\n            answerHistory.slice(0, testcases.length).forEach((history, i) => {\n              text += `${i + 1},${testcasePlaintext(testcases[i])},${\n                testcases[i].category\n              },${keyControlToString(testcases[i].ans)},${keyControlToString(\n                history.ans\n              )},${testcases[i].ans === history.ans ? \"正確\" : \"錯誤\"},${round(\n                history.elapsedTime / 1000,\n                2\n              )}\\n`;\n            });\n\n            const element = document.createElement(\"a\");\n            const file = new Blob([text], {\n              type: \"text/plain\",\n            });\n            element.href = URL.createObjectURL(file);\n            element.download = \"result.csv\";\n            document.body.appendChild(element);\n            element.click();\n            element.remove();\n          }}\n        >\n          下載 csv\n        </Button>\n      </div>\n\n      <TableContainer component={Paper} style={{ flex: 1 }}>\n        <Table stickyHeader>\n          <TableHead>\n            <TableRow hover>\n              <TableCell>題號</TableCell>\n              <TableCell align=\"right\">題目</TableCell>\n              <TableCell align=\"right\">類別</TableCell>\n              <TableCell align=\"right\">正確答案</TableCell>\n              <TableCell align=\"right\">回答</TableCell>\n              <TableCell align=\"right\">結果</TableCell>\n              <TableCell align=\"right\">耗時(s)</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {answerHistory.slice(0, testcases.length).map((history, i) => (\n              <TableRow key={i}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {i + 1}\n                </TableCell>\n                <TableCell align=\"right\">\n                  {testcaseShort(testcases[i])}\n                </TableCell>\n                <TableCell align=\"right\">{testcases[i].category}</TableCell>\n                <TableCell align=\"right\">\n                  {keyControlToString(testcases[i].ans)}\n                </TableCell>\n                <TableCell align=\"right\">\n                  {keyControlToString(history.ans)}\n                </TableCell>\n                <TableCell align=\"right\">\n                  {testcases[i].ans === history.ans ? \"✅\" : \"❌\"}\n                </TableCell>\n                <TableCell align=\"right\">\n                  {round(history.elapsedTime / 1000, 2)}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}